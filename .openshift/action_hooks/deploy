#!/bin/bash
# This deploy hook gets executed after dependencies are resolved and the
# build hook has been run but before the application has been started back
# up again.  This script gets executed directly, so it could be python, php,
# ruby, etc.

set -e

if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ]
then
    echo 1>&2
    echo "Could not find mysql database.  Please run:" 1>&2
    echo "rhc cartridge add -a $OPENSHIFT_APP_NAME -c mysql-5.1" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
fi

if [ -z "$OPENSHIFT_POSTGRESQL_DB_HOST" ]
then
    echo 1>&2
    echo "Could not find postgres database.  Please run:" 1>&2
    echo "rhc cartridge add -a $OPENSHIFT_APP_NAME -c postgresql-9.2" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
fi

if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ] && [ -z "$OPENSHIFT_POSTGRESQL_DB_HOST" ]
then
    exit 5
fi

pushd ${OPENSHIFT_REPO_DIR} > /dev/null
echo "exec rake db:migrate RAILS_ENV=${RAILS_ENV:-production}"
bundle exec rake db:migrate RAILS_ENV=${RAILS_ENV:-production}
# Already done by the Ruby 2.0 openshift cartridge
#echo "exec rake assets:precompile RAILS_ENV=${RAILS_ENV:-production} RAILS_GROUPS=assets"
#bundle exec rake assets:precompile RAILS_ENV=${RAILS_ENV:-production} RAILS_GROUPS=assets
popd > /dev/null
